第八周学习笔记：
位运算符：
| 或 （0011  1011  -> 1011） 
& 与 （0011  1011  -> 0011）
~ 按位取反  （0011  -> 1100）
^ 按位异或（相同为0不同为1）(0011  1011  ->1000)

XOR:异或
异或：相同为0，不同为1。也可用“不进位加法”来理解。
异或操作的一些特点：
X ^ 0 = X
X ^ 1s = ~X
X ^ X = 0
c = a ^ b => a ^ c = b,b ^ c = a #交换两个数
a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c #associative

指定位置的位运算
1、将X最右边的n位清零： X & （~0 << n）
2、获取X的第n位值（0或者1）：（X >> n）& 1
3、获取X的第n位的幂值：X & (1 << n)
4、仅将第n位置为1：X|(1 << n)
5、仅将第n位置为0： X & (~(1 << n))
6、将X最高位至第n位（含）清零：X & ((1 << n)-1)

实战位运算要点：
判断奇偶：
X % 2 == 1 -> (X & 1) == 1
X % 2 == 0 -> (X & 1) == 0
X >> 1 -> X / 2
即：X = X / 2; -> X = X >> 1;
	mid=(left + right) / 2; -> mid = (left + right) >> 1;
X = X & (X - 1) 清零最低位的1
X = -X => 得到最低位的1
X & ~X => 0

Bloom Filter vs Hash Table
一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。
优点：空间效率和查询时间都远远超过一般的算法
确定：有一定的误识别率和删除困难

LRU Cache
两个要素：大小、替换策略
Hash Table + Double LinkedList
O(1) 查询
O(1) 修改、更新

替换策略
LFU -least frequently used
LRU = least recently used
